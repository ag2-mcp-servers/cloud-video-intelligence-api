# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:05:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudVideointelligenceV1DetectedAttribute(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Detected attribute confidence. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the attribute, for example, glasses, dark_glasses, mouth_open. A full list of supported type names will be provided in the document.',
    )
    value: Optional[str] = Field(
        None,
        description='Text value of the detection result. For example, the value for "HairColor" can be "black", "blonde", etc.',
    )


class GoogleCloudVideointelligenceV1Entity(BaseModel):
    description: Optional[str] = Field(
        None, description='Textual description, e.g., `Fixed-gear bicycle`.'
    )
    entityId: Optional[str] = Field(
        None,
        description='Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).',
    )
    languageCode: Optional[str] = Field(
        None, description='Language code for `description` in BCP-47 format.'
    )


class PornographyLikelihood(Enum):
    LIKELIHOOD_UNSPECIFIED = 'LIKELIHOOD_UNSPECIFIED'
    VERY_UNLIKELY = 'VERY_UNLIKELY'
    UNLIKELY = 'UNLIKELY'
    POSSIBLE = 'POSSIBLE'
    LIKELY = 'LIKELY'
    VERY_LIKELY = 'VERY_LIKELY'


class GoogleCloudVideointelligenceV1ExplicitContentFrame(BaseModel):
    pornographyLikelihood: Optional[PornographyLikelihood] = Field(
        None, description='Likelihood of the pornography content..'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1LabelFrame(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1NormalizedBoundingBox(BaseModel):
    bottom: Optional[float] = Field(None, description='Bottom Y coordinate.')
    left: Optional[float] = Field(None, description='Left X coordinate.')
    right: Optional[float] = Field(None, description='Right X coordinate.')
    top: Optional[float] = Field(None, description='Top Y coordinate.')


class GoogleCloudVideointelligenceV1NormalizedVertex(BaseModel):
    x: Optional[float] = Field(None, description='X coordinate.')
    y: Optional[float] = Field(None, description='Y coordinate.')


class GoogleCloudVideointelligenceV1ObjectTrackingFrame(BaseModel):
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1NormalizedBoundingBox
    ] = Field(
        None,
        description='The normalized bounding box location of this object track for the frame.',
    )
    timeOffset: Optional[str] = Field(
        None, description='The timestamp of the frame in microseconds.'
    )


class Feature(Enum):
    FEATURE_UNSPECIFIED = 'FEATURE_UNSPECIFIED'
    LABEL_DETECTION = 'LABEL_DETECTION'
    SHOT_CHANGE_DETECTION = 'SHOT_CHANGE_DETECTION'
    EXPLICIT_CONTENT_DETECTION = 'EXPLICIT_CONTENT_DETECTION'
    FACE_DETECTION = 'FACE_DETECTION'
    SPEECH_TRANSCRIPTION = 'SPEECH_TRANSCRIPTION'
    TEXT_DETECTION = 'TEXT_DETECTION'
    OBJECT_TRACKING = 'OBJECT_TRACKING'
    LOGO_RECOGNITION = 'LOGO_RECOGNITION'
    PERSON_DETECTION = 'PERSON_DETECTION'


class GoogleCloudVideointelligenceV1VideoSegment(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the end of the segment (inclusive).',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the start of the segment (inclusive).',
    )


class GoogleCloudVideointelligenceV1WordInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    speakerTag: Optional[int] = Field(
        None,
        description='Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from 1 up to diarization_speaker_count, and is only set if speaker diarization is enabled.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    word: Optional[str] = Field(
        None, description='The word corresponding to this set of information.'
    )


class GoogleCloudVideointelligenceV1beta2DetectedAttribute(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Detected attribute confidence. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the attribute, for example, glasses, dark_glasses, mouth_open. A full list of supported type names will be provided in the document.',
    )
    value: Optional[str] = Field(
        None,
        description='Text value of the detection result. For example, the value for "HairColor" can be "black", "blonde", etc.',
    )


class GoogleCloudVideointelligenceV1beta2Entity(BaseModel):
    description: Optional[str] = Field(
        None, description='Textual description, e.g., `Fixed-gear bicycle`.'
    )
    entityId: Optional[str] = Field(
        None,
        description='Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).',
    )
    languageCode: Optional[str] = Field(
        None, description='Language code for `description` in BCP-47 format.'
    )


class GoogleCloudVideointelligenceV1beta2ExplicitContentFrame(BaseModel):
    pornographyLikelihood: Optional[PornographyLikelihood] = Field(
        None, description='Likelihood of the pornography content..'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1beta2LabelFrame(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1beta2NormalizedBoundingBox(BaseModel):
    bottom: Optional[float] = Field(None, description='Bottom Y coordinate.')
    left: Optional[float] = Field(None, description='Left X coordinate.')
    right: Optional[float] = Field(None, description='Right X coordinate.')
    top: Optional[float] = Field(None, description='Top Y coordinate.')


class GoogleCloudVideointelligenceV1beta2NormalizedVertex(BaseModel):
    x: Optional[float] = Field(None, description='X coordinate.')
    y: Optional[float] = Field(None, description='Y coordinate.')


class GoogleCloudVideointelligenceV1beta2ObjectTrackingFrame(BaseModel):
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1beta2NormalizedBoundingBox
    ] = Field(
        None,
        description='The normalized bounding box location of this object track for the frame.',
    )
    timeOffset: Optional[str] = Field(
        None, description='The timestamp of the frame in microseconds.'
    )


class GoogleCloudVideointelligenceV1beta2VideoSegment(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the end of the segment (inclusive).',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the start of the segment (inclusive).',
    )


class GoogleCloudVideointelligenceV1beta2WordInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    speakerTag: Optional[int] = Field(
        None,
        description='Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from 1 up to diarization_speaker_count, and is only set if speaker diarization is enabled.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    word: Optional[str] = Field(
        None, description='The word corresponding to this set of information.'
    )


class GoogleCloudVideointelligenceV1p1beta1DetectedAttribute(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Detected attribute confidence. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the attribute, for example, glasses, dark_glasses, mouth_open. A full list of supported type names will be provided in the document.',
    )
    value: Optional[str] = Field(
        None,
        description='Text value of the detection result. For example, the value for "HairColor" can be "black", "blonde", etc.',
    )


class GoogleCloudVideointelligenceV1p1beta1Entity(BaseModel):
    description: Optional[str] = Field(
        None, description='Textual description, e.g., `Fixed-gear bicycle`.'
    )
    entityId: Optional[str] = Field(
        None,
        description='Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).',
    )
    languageCode: Optional[str] = Field(
        None, description='Language code for `description` in BCP-47 format.'
    )


class GoogleCloudVideointelligenceV1p1beta1ExplicitContentFrame(BaseModel):
    pornographyLikelihood: Optional[PornographyLikelihood] = Field(
        None, description='Likelihood of the pornography content..'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p1beta1LabelFrame(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox(BaseModel):
    bottom: Optional[float] = Field(None, description='Bottom Y coordinate.')
    left: Optional[float] = Field(None, description='Left X coordinate.')
    right: Optional[float] = Field(None, description='Right X coordinate.')
    top: Optional[float] = Field(None, description='Top Y coordinate.')


class GoogleCloudVideointelligenceV1p1beta1NormalizedVertex(BaseModel):
    x: Optional[float] = Field(None, description='X coordinate.')
    y: Optional[float] = Field(None, description='Y coordinate.')


class GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame(BaseModel):
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='The normalized bounding box location of this object track for the frame.',
    )
    timeOffset: Optional[str] = Field(
        None, description='The timestamp of the frame in microseconds.'
    )


class GoogleCloudVideointelligenceV1p1beta1VideoSegment(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the end of the segment (inclusive).',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the start of the segment (inclusive).',
    )


class GoogleCloudVideointelligenceV1p1beta1WordInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    speakerTag: Optional[int] = Field(
        None,
        description='Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from 1 up to diarization_speaker_count, and is only set if speaker diarization is enabled.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    word: Optional[str] = Field(
        None, description='The word corresponding to this set of information.'
    )


class GoogleCloudVideointelligenceV1p2beta1DetectedAttribute(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Detected attribute confidence. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the attribute, for example, glasses, dark_glasses, mouth_open. A full list of supported type names will be provided in the document.',
    )
    value: Optional[str] = Field(
        None,
        description='Text value of the detection result. For example, the value for "HairColor" can be "black", "blonde", etc.',
    )


class GoogleCloudVideointelligenceV1p2beta1Entity(BaseModel):
    description: Optional[str] = Field(
        None, description='Textual description, e.g., `Fixed-gear bicycle`.'
    )
    entityId: Optional[str] = Field(
        None,
        description='Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).',
    )
    languageCode: Optional[str] = Field(
        None, description='Language code for `description` in BCP-47 format.'
    )


class GoogleCloudVideointelligenceV1p2beta1ExplicitContentFrame(BaseModel):
    pornographyLikelihood: Optional[PornographyLikelihood] = Field(
        None, description='Likelihood of the pornography content..'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p2beta1LabelFrame(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingBox(BaseModel):
    bottom: Optional[float] = Field(None, description='Bottom Y coordinate.')
    left: Optional[float] = Field(None, description='Left X coordinate.')
    right: Optional[float] = Field(None, description='Right X coordinate.')
    top: Optional[float] = Field(None, description='Top Y coordinate.')


class GoogleCloudVideointelligenceV1p2beta1NormalizedVertex(BaseModel):
    x: Optional[float] = Field(None, description='X coordinate.')
    y: Optional[float] = Field(None, description='Y coordinate.')


class GoogleCloudVideointelligenceV1p2beta1ObjectTrackingFrame(BaseModel):
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='The normalized bounding box location of this object track for the frame.',
    )
    timeOffset: Optional[str] = Field(
        None, description='The timestamp of the frame in microseconds.'
    )


class GoogleCloudVideointelligenceV1p2beta1VideoSegment(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the end of the segment (inclusive).',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the start of the segment (inclusive).',
    )


class GoogleCloudVideointelligenceV1p2beta1WordInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    speakerTag: Optional[int] = Field(
        None,
        description='Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from 1 up to diarization_speaker_count, and is only set if speaker diarization is enabled.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    word: Optional[str] = Field(
        None, description='The word corresponding to this set of information.'
    )


class Feature4(Enum):
    FEATURE_UNSPECIFIED = 'FEATURE_UNSPECIFIED'
    LABEL_DETECTION = 'LABEL_DETECTION'
    SHOT_CHANGE_DETECTION = 'SHOT_CHANGE_DETECTION'
    EXPLICIT_CONTENT_DETECTION = 'EXPLICIT_CONTENT_DETECTION'
    FACE_DETECTION = 'FACE_DETECTION'
    SPEECH_TRANSCRIPTION = 'SPEECH_TRANSCRIPTION'
    TEXT_DETECTION = 'TEXT_DETECTION'
    OBJECT_TRACKING = 'OBJECT_TRACKING'
    LOGO_RECOGNITION = 'LOGO_RECOGNITION'
    CELEBRITY_RECOGNITION = 'CELEBRITY_RECOGNITION'
    PERSON_DETECTION = 'PERSON_DETECTION'


class GoogleCloudVideointelligenceV1p3beta1Celebrity(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Textual description of additional information about the celebrity, if applicable.',
    )
    displayName: Optional[str] = Field(None, description='The celebrity name.')
    name: Optional[str] = Field(
        None,
        description='The resource name of the celebrity. Have the format `video-intelligence/kg-mid` indicates a celebrity from preloaded gallery. kg-mid is the id in Google knowledge graph, which is unique for the celebrity.',
    )


class GoogleCloudVideointelligenceV1p3beta1DetectedAttribute(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Detected attribute confidence. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the attribute, for example, glasses, dark_glasses, mouth_open. A full list of supported type names will be provided in the document.',
    )
    value: Optional[str] = Field(
        None,
        description='Text value of the detection result. For example, the value for "HairColor" can be "black", "blonde", etc.',
    )


class GoogleCloudVideointelligenceV1p3beta1Entity(BaseModel):
    description: Optional[str] = Field(
        None, description='Textual description, e.g., `Fixed-gear bicycle`.'
    )
    entityId: Optional[str] = Field(
        None,
        description='Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).',
    )
    languageCode: Optional[str] = Field(
        None, description='Language code for `description` in BCP-47 format.'
    )


class GoogleCloudVideointelligenceV1p3beta1ExplicitContentDetectionConfig(BaseModel):
    model: Optional[str] = Field(
        None,
        description='Model to use for explicit content detection. Supported values: "builtin/stable" (the default if unset) and "builtin/latest".',
    )


class GoogleCloudVideointelligenceV1p3beta1ExplicitContentFrame(BaseModel):
    pornographyLikelihood: Optional[PornographyLikelihood] = Field(
        None, description='Likelihood of the pornography content..'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p3beta1FaceDetectionConfig(BaseModel):
    includeAttributes: Optional[bool] = Field(
        None,
        description="Whether to enable face attributes detection, such as glasses, dark_glasses, mouth_open etc. Ignored if 'include_bounding_boxes' is set to false.",
    )
    includeBoundingBoxes: Optional[bool] = Field(
        None,
        description='Whether bounding boxes are included in the face annotation output.',
    )
    model: Optional[str] = Field(
        None,
        description='Model to use for face detection. Supported values: "builtin/stable" (the default if unset) and "builtin/latest".',
    )


class LabelDetectionMode(Enum):
    LABEL_DETECTION_MODE_UNSPECIFIED = 'LABEL_DETECTION_MODE_UNSPECIFIED'
    SHOT_MODE = 'SHOT_MODE'
    FRAME_MODE = 'FRAME_MODE'
    SHOT_AND_FRAME_MODE = 'SHOT_AND_FRAME_MODE'


class GoogleCloudVideointelligenceV1p3beta1LabelDetectionConfig(BaseModel):
    frameConfidenceThreshold: Optional[float] = Field(
        None,
        description='The confidence threshold we perform filtering on the labels from frame-level detection. If not set, it is set to 0.4 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.',
    )
    labelDetectionMode: Optional[LabelDetectionMode] = Field(
        None,
        description='What labels should be detected with LABEL_DETECTION, in addition to video-level labels or segment-level labels. If unspecified, defaults to `SHOT_MODE`.',
    )
    model: Optional[str] = Field(
        None,
        description='Model to use for label detection. Supported values: "builtin/stable" (the default if unset) and "builtin/latest".',
    )
    stationaryCamera: Optional[bool] = Field(
        None,
        description='Whether the video has been shot from a stationary (i.e., non-moving) camera. When set to true, might improve detection accuracy for moving objects. Should be used with `SHOT_AND_FRAME_MODE` enabled.',
    )
    videoConfidenceThreshold: Optional[float] = Field(
        None,
        description="The confidence threshold we perform filtering on the labels from video-level and shot-level detections. If not set, it's set to 0.3 by default. The valid range for this threshold is [0.1, 0.9]. Any value set outside of this range will be clipped. Note: For best results, follow the default threshold. We will update the default threshold everytime when we release a new model.",
    )


class GoogleCloudVideointelligenceV1p3beta1LabelFrame(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingBox(BaseModel):
    bottom: Optional[float] = Field(None, description='Bottom Y coordinate.')
    left: Optional[float] = Field(None, description='Left X coordinate.')
    right: Optional[float] = Field(None, description='Right X coordinate.')
    top: Optional[float] = Field(None, description='Top Y coordinate.')


class GoogleCloudVideointelligenceV1p3beta1NormalizedVertex(BaseModel):
    x: Optional[float] = Field(None, description='X coordinate.')
    y: Optional[float] = Field(None, description='Y coordinate.')


class GoogleCloudVideointelligenceV1p3beta1ObjectTrackingConfig(BaseModel):
    model: Optional[str] = Field(
        None,
        description='Model to use for object tracking. Supported values: "builtin/stable" (the default if unset) and "builtin/latest".',
    )


class GoogleCloudVideointelligenceV1p3beta1ObjectTrackingFrame(BaseModel):
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='The normalized bounding box location of this object track for the frame.',
    )
    timeOffset: Optional[str] = Field(
        None, description='The timestamp of the frame in microseconds.'
    )


class GoogleCloudVideointelligenceV1p3beta1PersonDetectionConfig(BaseModel):
    includeAttributes: Optional[bool] = Field(
        None,
        description="Whether to enable person attributes detection, such as cloth color (black, blue, etc), type (coat, dress, etc), pattern (plain, floral, etc), hair, etc. Ignored if 'include_bounding_boxes' is set to false.",
    )
    includeBoundingBoxes: Optional[bool] = Field(
        None,
        description='Whether bounding boxes are included in the person detection annotation output.',
    )
    includePoseLandmarks: Optional[bool] = Field(
        None,
        description="Whether to enable pose landmarks detection. Ignored if 'include_bounding_boxes' is set to false.",
    )


class GoogleCloudVideointelligenceV1p3beta1RecognizedCelebrity(BaseModel):
    celebrity: Optional[GoogleCloudVideointelligenceV1p3beta1Celebrity] = Field(
        None, description='The recognized celebrity.'
    )
    confidence: Optional[float] = Field(
        None, description='Recognition confidence. Range [0, 1].'
    )


class GoogleCloudVideointelligenceV1p3beta1ShotChangeDetectionConfig(BaseModel):
    model: Optional[str] = Field(
        None,
        description='Model to use for shot change detection. Supported values: "builtin/stable" (the default if unset), "builtin/latest", and "builtin/legacy".',
    )


class GoogleCloudVideointelligenceV1p3beta1SpeechContext(BaseModel):
    phrases: Optional[List[str]] = Field(
        None,
        description='Optional. A list of strings containing words and phrases "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech/limits#content).',
    )


class GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig(BaseModel):
    audioTracks: Optional[List[int]] = Field(
        None,
        description='Optional. For file formats, such as MXF or MKV, supporting multiple audio tracks, specify up to two tracks. Default: track 0.',
    )
    diarizationSpeakerCount: Optional[int] = Field(
        None,
        description="Optional. If set, specifies the estimated number of speakers in the conversation. If not set, defaults to '2'. Ignored unless enable_speaker_diarization is set to true.",
    )
    enableAutomaticPunctuation: Optional[bool] = Field(
        None,
        description='Optional. If \'true\', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default \'false\' value does not add punctuation to result hypotheses. NOTE: "This is currently offered as an experimental service, complimentary to all users. In the future this may be exclusively available as a premium feature."',
    )
    enableSpeakerDiarization: Optional[bool] = Field(
        None,
        description="Optional. If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_tag provided in the WordInfo. Note: When this is true, we send all the words from the beginning of the audio for the top alternative in every consecutive response. This is done in order to improve our speaker tags as our models learn to identify the speakers in the conversation over time.",
    )
    enableWordConfidence: Optional[bool] = Field(
        None,
        description='Optional. If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.',
    )
    filterProfanity: Optional[bool] = Field(
        None,
        description='Optional. If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. "f***". If set to `false` or omitted, profanities won\'t be filtered out.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Required. *Required* The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". See [Language Support](https://cloud.google.com/speech/docs/languages) for a list of the currently supported language codes.',
    )
    maxAlternatives: Optional[int] = Field(
        None,
        description='Optional. Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechTranscription`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.',
    )
    speechContexts: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1SpeechContext]
    ] = Field(
        None,
        description='Optional. A means to provide context to assist the speech recognition.',
    )


class GoogleCloudVideointelligenceV1p3beta1TextDetectionConfig(BaseModel):
    languageHints: Optional[List[str]] = Field(
        None,
        description='Language hint can be specified if the language to be detected is known a priori. It can increase the accuracy of the detection. Language hint must be language code in BCP-47 format. Automatic language detection is performed if no hint is provided.',
    )
    model: Optional[str] = Field(
        None,
        description='Model to use for text detection. Supported values: "builtin/stable" (the default if unset) and "builtin/latest".',
    )


class GoogleCloudVideointelligenceV1p3beta1VideoSegment(BaseModel):
    endTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the end of the segment (inclusive).',
    )
    startTimeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the start of the segment (inclusive).',
    )


class GoogleCloudVideointelligenceV1p3beta1WordInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    endTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    speakerTag: Optional[int] = Field(
        None,
        description='Output only. A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from 1 up to diarization_speaker_count, and is only set if speaker diarization is enabled.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.',
    )
    word: Optional[str] = Field(
        None, description='The word corresponding to this set of information.'
    )


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudVideointelligenceV1DetectedLandmark(BaseModel):
    confidence: Optional[float] = Field(
        None, description='The confidence score of the detected landmark. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this landmark, for example, left_hand, right_shoulder.',
    )
    point: Optional[GoogleCloudVideointelligenceV1NormalizedVertex] = Field(
        None,
        description='The 2D point of the detected landmark using the normalized image coordindate system. The normalized coordinates have the range from 0 to 1.',
    )


class GoogleCloudVideointelligenceV1ExplicitContentAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1ExplicitContentFrame]] = Field(
        None, description='All video frames where explicit content was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1FaceFrame(BaseModel):
    normalizedBoundingBoxes: Optional[
        List[GoogleCloudVideointelligenceV1NormalizedBoundingBox]
    ] = Field(
        None,
        description='Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1FaceSegment(BaseModel):
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None, description='Video segment where a face was detected.'
    )


class GoogleCloudVideointelligenceV1LabelSegment(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None, description='Video segment where a label was detected.'
    )


class GoogleCloudVideointelligenceV1NormalizedBoundingPoly(BaseModel):
    vertices: Optional[List[GoogleCloudVideointelligenceV1NormalizedVertex]] = Field(
        None, description='Normalized vertices of the bounding polygon.'
    )


class GoogleCloudVideointelligenceV1ObjectTrackingAnnotation(BaseModel):
    confidence: Optional[float] = Field(
        None, description="Object category's labeling confidence of this track."
    )
    entity: Optional[GoogleCloudVideointelligenceV1Entity] = Field(
        None,
        description='Entity to specify the object category that this track is labeled as.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1ObjectTrackingFrame]] = Field(
        None,
        description='Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None,
        description='Non-streaming batch mode ONLY. Each object track corresponds to one video segment where it appears.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1SpeechRecognitionAlternative(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    transcript: Optional[str] = Field(
        None, description='Transcript text representing the words that the user spoke.'
    )
    words: Optional[List[GoogleCloudVideointelligenceV1WordInfo]] = Field(
        None,
        description='Output only. A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is set to true, you will see all the words from the beginning of the audio.',
    )


class GoogleCloudVideointelligenceV1SpeechTranscription(BaseModel):
    alternatives: Optional[
        List[GoogleCloudVideointelligenceV1SpeechRecognitionAlternative]
    ] = Field(
        None,
        description='May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.',
    )


class GoogleCloudVideointelligenceV1TextFrame(BaseModel):
    rotatedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1NormalizedBoundingPoly
    ] = Field(None, description='Bounding polygon of the detected text for this frame.')
    timeOffset: Optional[str] = Field(None, description='Timestamp of this frame.')


class GoogleCloudVideointelligenceV1TextSegment(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Confidence for the track of detected text. It is calculated as the highest over all frames where OCR detected text appears.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1TextFrame]] = Field(
        None,
        description='Information related to the frames where OCR detected text appears.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None, description='Video segment where a text snippet was detected.'
    )


class GoogleCloudVideointelligenceV1TimestampedObject(BaseModel):
    attributes: Optional[List[GoogleCloudVideointelligenceV1DetectedAttribute]] = Field(
        None, description='Optional. The attributes of the object in the bounding box.'
    )
    landmarks: Optional[List[GoogleCloudVideointelligenceV1DetectedLandmark]] = Field(
        None, description='Optional. The detected landmarks.'
    )
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1NormalizedBoundingBox
    ] = Field(
        None,
        description='Normalized Bounding box in a frame, where the object is located.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this object.',
    )


class GoogleCloudVideointelligenceV1Track(BaseModel):
    attributes: Optional[List[GoogleCloudVideointelligenceV1DetectedAttribute]] = Field(
        None, description='Optional. Attributes in the track level.'
    )
    confidence: Optional[float] = Field(
        None, description='Optional. The confidence score of the tracked object.'
    )
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None, description='Video segment of a track.'
    )
    timestampedObjects: Optional[
        List[GoogleCloudVideointelligenceV1TimestampedObject]
    ] = Field(
        None,
        description='The object with timestamp and attributes per frame in the track.',
    )


class GoogleCloudVideointelligenceV1VideoAnnotationProgress(BaseModel):
    feature: Optional[Feature] = Field(
        None,
        description='Specifies which feature is being tracked if the request contains more than one feature.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None,
        description='Specifies which segment is being tracked if the request contains more than one segment.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time of the most recent update.'
    )


class GoogleCloudVideointelligenceV1beta2DetectedLandmark(BaseModel):
    confidence: Optional[float] = Field(
        None, description='The confidence score of the detected landmark. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this landmark, for example, left_hand, right_shoulder.',
    )
    point: Optional[GoogleCloudVideointelligenceV1beta2NormalizedVertex] = Field(
        None,
        description='The 2D point of the detected landmark using the normalized image coordindate system. The normalized coordinates have the range from 0 to 1.',
    )


class GoogleCloudVideointelligenceV1beta2ExplicitContentAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2ExplicitContentFrame]] = (
        Field(None, description='All video frames where explicit content was detected.')
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2FaceFrame(BaseModel):
    normalizedBoundingBoxes: Optional[
        List[GoogleCloudVideointelligenceV1beta2NormalizedBoundingBox]
    ] = Field(
        None,
        description='Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1beta2FaceSegment(BaseModel):
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None, description='Video segment where a face was detected.'
    )


class GoogleCloudVideointelligenceV1beta2LabelSegment(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None, description='Video segment where a label was detected.'
    )


class GoogleCloudVideointelligenceV1beta2NormalizedBoundingPoly(BaseModel):
    vertices: Optional[List[GoogleCloudVideointelligenceV1beta2NormalizedVertex]] = (
        Field(None, description='Normalized vertices of the bounding polygon.')
    )


class GoogleCloudVideointelligenceV1beta2ObjectTrackingAnnotation(BaseModel):
    confidence: Optional[float] = Field(
        None, description="Object category's labeling confidence of this track."
    )
    entity: Optional[GoogleCloudVideointelligenceV1beta2Entity] = Field(
        None,
        description='Entity to specify the object category that this track is labeled as.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2ObjectTrackingFrame]] = (
        Field(
            None,
            description='Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.',
        )
    )
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None,
        description='Non-streaming batch mode ONLY. Each object track corresponds to one video segment where it appears.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    transcript: Optional[str] = Field(
        None, description='Transcript text representing the words that the user spoke.'
    )
    words: Optional[List[GoogleCloudVideointelligenceV1beta2WordInfo]] = Field(
        None,
        description='Output only. A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is set to true, you will see all the words from the beginning of the audio.',
    )


class GoogleCloudVideointelligenceV1beta2SpeechTranscription(BaseModel):
    alternatives: Optional[
        List[GoogleCloudVideointelligenceV1beta2SpeechRecognitionAlternative]
    ] = Field(
        None,
        description='May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.',
    )


class GoogleCloudVideointelligenceV1beta2TextFrame(BaseModel):
    rotatedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1beta2NormalizedBoundingPoly
    ] = Field(None, description='Bounding polygon of the detected text for this frame.')
    timeOffset: Optional[str] = Field(None, description='Timestamp of this frame.')


class GoogleCloudVideointelligenceV1beta2TextSegment(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Confidence for the track of detected text. It is calculated as the highest over all frames where OCR detected text appears.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2TextFrame]] = Field(
        None,
        description='Information related to the frames where OCR detected text appears.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None, description='Video segment where a text snippet was detected.'
    )


class GoogleCloudVideointelligenceV1beta2TimestampedObject(BaseModel):
    attributes: Optional[List[GoogleCloudVideointelligenceV1beta2DetectedAttribute]] = (
        Field(
            None,
            description='Optional. The attributes of the object in the bounding box.',
        )
    )
    landmarks: Optional[List[GoogleCloudVideointelligenceV1beta2DetectedLandmark]] = (
        Field(None, description='Optional. The detected landmarks.')
    )
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1beta2NormalizedBoundingBox
    ] = Field(
        None,
        description='Normalized Bounding box in a frame, where the object is located.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this object.',
    )


class GoogleCloudVideointelligenceV1beta2Track(BaseModel):
    attributes: Optional[List[GoogleCloudVideointelligenceV1beta2DetectedAttribute]] = (
        Field(None, description='Optional. Attributes in the track level.')
    )
    confidence: Optional[float] = Field(
        None, description='Optional. The confidence score of the tracked object.'
    )
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None, description='Video segment of a track.'
    )
    timestampedObjects: Optional[
        List[GoogleCloudVideointelligenceV1beta2TimestampedObject]
    ] = Field(
        None,
        description='The object with timestamp and attributes per frame in the track.',
    )


class GoogleCloudVideointelligenceV1beta2VideoAnnotationProgress(BaseModel):
    feature: Optional[Feature] = Field(
        None,
        description='Specifies which feature is being tracked if the request contains more than one feature.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None,
        description='Specifies which segment is being tracked if the request contains more than one segment.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time of the most recent update.'
    )


class GoogleCloudVideointelligenceV1p1beta1DetectedLandmark(BaseModel):
    confidence: Optional[float] = Field(
        None, description='The confidence score of the detected landmark. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this landmark, for example, left_hand, right_shoulder.',
    )
    point: Optional[GoogleCloudVideointelligenceV1p1beta1NormalizedVertex] = Field(
        None,
        description='The 2D point of the detected landmark using the normalized image coordindate system. The normalized coordinates have the range from 0 to 1.',
    )


class GoogleCloudVideointelligenceV1p1beta1ExplicitContentAnnotation(BaseModel):
    frames: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1ExplicitContentFrame]
    ] = Field(None, description='All video frames where explicit content was detected.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1FaceFrame(BaseModel):
    normalizedBoundingBoxes: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox]
    ] = Field(
        None,
        description='Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p1beta1FaceSegment(BaseModel):
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None, description='Video segment where a face was detected.'
    )


class GoogleCloudVideointelligenceV1p1beta1LabelSegment(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None, description='Video segment where a label was detected.'
    )


class GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingPoly(BaseModel):
    vertices: Optional[List[GoogleCloudVideointelligenceV1p1beta1NormalizedVertex]] = (
        Field(None, description='Normalized vertices of the bounding polygon.')
    )


class GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation(BaseModel):
    confidence: Optional[float] = Field(
        None, description="Object category's labeling confidence of this track."
    )
    entity: Optional[GoogleCloudVideointelligenceV1p1beta1Entity] = Field(
        None,
        description='Entity to specify the object category that this track is labeled as.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p1beta1ObjectTrackingFrame]] = (
        Field(
            None,
            description='Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.',
        )
    )
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None,
        description='Non-streaming batch mode ONLY. Each object track corresponds to one video segment where it appears.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1SpeechRecognitionAlternative(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    transcript: Optional[str] = Field(
        None, description='Transcript text representing the words that the user spoke.'
    )
    words: Optional[List[GoogleCloudVideointelligenceV1p1beta1WordInfo]] = Field(
        None,
        description='Output only. A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is set to true, you will see all the words from the beginning of the audio.',
    )


class GoogleCloudVideointelligenceV1p1beta1SpeechTranscription(BaseModel):
    alternatives: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1SpeechRecognitionAlternative]
    ] = Field(
        None,
        description='May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.',
    )


class GoogleCloudVideointelligenceV1p1beta1TextFrame(BaseModel):
    rotatedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingPoly
    ] = Field(None, description='Bounding polygon of the detected text for this frame.')
    timeOffset: Optional[str] = Field(None, description='Timestamp of this frame.')


class GoogleCloudVideointelligenceV1p1beta1TextSegment(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Confidence for the track of detected text. It is calculated as the highest over all frames where OCR detected text appears.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p1beta1TextFrame]] = Field(
        None,
        description='Information related to the frames where OCR detected text appears.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None, description='Video segment where a text snippet was detected.'
    )


class GoogleCloudVideointelligenceV1p1beta1TimestampedObject(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1DetectedAttribute]
    ] = Field(
        None, description='Optional. The attributes of the object in the bounding box.'
    )
    landmarks: Optional[List[GoogleCloudVideointelligenceV1p1beta1DetectedLandmark]] = (
        Field(None, description='Optional. The detected landmarks.')
    )
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p1beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='Normalized Bounding box in a frame, where the object is located.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this object.',
    )


class GoogleCloudVideointelligenceV1p1beta1Track(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1DetectedAttribute]
    ] = Field(None, description='Optional. Attributes in the track level.')
    confidence: Optional[float] = Field(
        None, description='Optional. The confidence score of the tracked object.'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None, description='Video segment of a track.'
    )
    timestampedObjects: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1TimestampedObject]
    ] = Field(
        None,
        description='The object with timestamp and attributes per frame in the track.',
    )


class GoogleCloudVideointelligenceV1p1beta1VideoAnnotationProgress(BaseModel):
    feature: Optional[Feature] = Field(
        None,
        description='Specifies which feature is being tracked if the request contains more than one feature.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None,
        description='Specifies which segment is being tracked if the request contains more than one segment.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time of the most recent update.'
    )


class GoogleCloudVideointelligenceV1p2beta1DetectedLandmark(BaseModel):
    confidence: Optional[float] = Field(
        None, description='The confidence score of the detected landmark. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this landmark, for example, left_hand, right_shoulder.',
    )
    point: Optional[GoogleCloudVideointelligenceV1p2beta1NormalizedVertex] = Field(
        None,
        description='The 2D point of the detected landmark using the normalized image coordindate system. The normalized coordinates have the range from 0 to 1.',
    )


class GoogleCloudVideointelligenceV1p2beta1ExplicitContentAnnotation(BaseModel):
    frames: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1ExplicitContentFrame]
    ] = Field(None, description='All video frames where explicit content was detected.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1FaceFrame(BaseModel):
    normalizedBoundingBoxes: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingBox]
    ] = Field(
        None,
        description='Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p2beta1FaceSegment(BaseModel):
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None, description='Video segment where a face was detected.'
    )


class GoogleCloudVideointelligenceV1p2beta1LabelSegment(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None, description='Video segment where a label was detected.'
    )


class GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingPoly(BaseModel):
    vertices: Optional[List[GoogleCloudVideointelligenceV1p2beta1NormalizedVertex]] = (
        Field(None, description='Normalized vertices of the bounding polygon.')
    )


class GoogleCloudVideointelligenceV1p2beta1ObjectTrackingAnnotation(BaseModel):
    confidence: Optional[float] = Field(
        None, description="Object category's labeling confidence of this track."
    )
    entity: Optional[GoogleCloudVideointelligenceV1p2beta1Entity] = Field(
        None,
        description='Entity to specify the object category that this track is labeled as.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p2beta1ObjectTrackingFrame]] = (
        Field(
            None,
            description='Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.',
        )
    )
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None,
        description='Non-streaming batch mode ONLY. Each object track corresponds to one video segment where it appears.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1SpeechRecognitionAlternative(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    transcript: Optional[str] = Field(
        None, description='Transcript text representing the words that the user spoke.'
    )
    words: Optional[List[GoogleCloudVideointelligenceV1p2beta1WordInfo]] = Field(
        None,
        description='Output only. A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is set to true, you will see all the words from the beginning of the audio.',
    )


class GoogleCloudVideointelligenceV1p2beta1SpeechTranscription(BaseModel):
    alternatives: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1SpeechRecognitionAlternative]
    ] = Field(
        None,
        description='May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.',
    )


class GoogleCloudVideointelligenceV1p2beta1TextFrame(BaseModel):
    rotatedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingPoly
    ] = Field(None, description='Bounding polygon of the detected text for this frame.')
    timeOffset: Optional[str] = Field(None, description='Timestamp of this frame.')


class GoogleCloudVideointelligenceV1p2beta1TextSegment(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Confidence for the track of detected text. It is calculated as the highest over all frames where OCR detected text appears.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p2beta1TextFrame]] = Field(
        None,
        description='Information related to the frames where OCR detected text appears.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None, description='Video segment where a text snippet was detected.'
    )


class GoogleCloudVideointelligenceV1p2beta1TimestampedObject(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1DetectedAttribute]
    ] = Field(
        None, description='Optional. The attributes of the object in the bounding box.'
    )
    landmarks: Optional[List[GoogleCloudVideointelligenceV1p2beta1DetectedLandmark]] = (
        Field(None, description='Optional. The detected landmarks.')
    )
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p2beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='Normalized Bounding box in a frame, where the object is located.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this object.',
    )


class GoogleCloudVideointelligenceV1p2beta1Track(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1DetectedAttribute]
    ] = Field(None, description='Optional. Attributes in the track level.')
    confidence: Optional[float] = Field(
        None, description='Optional. The confidence score of the tracked object.'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None, description='Video segment of a track.'
    )
    timestampedObjects: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1TimestampedObject]
    ] = Field(
        None,
        description='The object with timestamp and attributes per frame in the track.',
    )


class GoogleCloudVideointelligenceV1p2beta1VideoAnnotationProgress(BaseModel):
    feature: Optional[Feature] = Field(
        None,
        description='Specifies which feature is being tracked if the request contains more than one feature.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None,
        description='Specifies which segment is being tracked if the request contains more than one segment.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time of the most recent update.'
    )


class GoogleCloudVideointelligenceV1p3beta1DetectedLandmark(BaseModel):
    confidence: Optional[float] = Field(
        None, description='The confidence score of the detected landmark. Range [0, 1].'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this landmark, for example, left_hand, right_shoulder.',
    )
    point: Optional[GoogleCloudVideointelligenceV1p3beta1NormalizedVertex] = Field(
        None,
        description='The 2D point of the detected landmark using the normalized image coordindate system. The normalized coordinates have the range from 0 to 1.',
    )


class GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation(BaseModel):
    frames: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1ExplicitContentFrame]
    ] = Field(None, description='All video frames where explicit content was detected.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1FaceFrame(BaseModel):
    normalizedBoundingBoxes: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingBox]
    ] = Field(
        None,
        description='Normalized Bounding boxes in a frame. There can be more than one boxes if the same face is detected in multiple locations within the current frame.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this location.',
    )


class GoogleCloudVideointelligenceV1p3beta1FaceSegment(BaseModel):
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None, description='Video segment where a face was detected.'
    )


class GoogleCloudVideointelligenceV1p3beta1LabelSegment(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Confidence that the label is accurate. Range: [0, 1].'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None, description='Video segment where a label was detected.'
    )


class GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingPoly(BaseModel):
    vertices: Optional[List[GoogleCloudVideointelligenceV1p3beta1NormalizedVertex]] = (
        Field(None, description='Normalized vertices of the bounding polygon.')
    )


class GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation(BaseModel):
    confidence: Optional[float] = Field(
        None, description="Object category's labeling confidence of this track."
    )
    entity: Optional[GoogleCloudVideointelligenceV1p3beta1Entity] = Field(
        None,
        description='Entity to specify the object category that this track is labeled as.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p3beta1ObjectTrackingFrame]] = (
        Field(
            None,
            description='Information corresponding to all frames where this object track appears. Non-streaming batch mode: it may be one or multiple ObjectTrackingFrame messages in frames. Streaming mode: it can only be one ObjectTrackingFrame message in frames.',
        )
    )
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None,
        description='Non-streaming batch mode ONLY. Each object track corresponds to one video segment where it appears.',
    )
    trackId: Optional[str] = Field(
        None,
        description='Streaming mode ONLY. In streaming mode, we do not know the end time of a tracked object before it is completed. Hence, there is no VideoSegment info returned. Instead, we provide a unique identifiable integer track_id so that the customers can correlate the results of the ongoing ObjectTrackAnnotation of the same track_id over time.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1SpeechRecognitionAlternative(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Output only. The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.',
    )
    transcript: Optional[str] = Field(
        None, description='Transcript text representing the words that the user spoke.'
    )
    words: Optional[List[GoogleCloudVideointelligenceV1p3beta1WordInfo]] = Field(
        None,
        description='Output only. A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is set to true, you will see all the words from the beginning of the audio.',
    )


class GoogleCloudVideointelligenceV1p3beta1SpeechTranscription(BaseModel):
    alternatives: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1SpeechRecognitionAlternative]
    ] = Field(
        None,
        description='May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.',
    )


class GoogleCloudVideointelligenceV1p3beta1TextFrame(BaseModel):
    rotatedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingPoly
    ] = Field(None, description='Bounding polygon of the detected text for this frame.')
    timeOffset: Optional[str] = Field(None, description='Timestamp of this frame.')


class GoogleCloudVideointelligenceV1p3beta1TextSegment(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='Confidence for the track of detected text. It is calculated as the highest over all frames where OCR detected text appears.',
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p3beta1TextFrame]] = Field(
        None,
        description='Information related to the frames where OCR detected text appears.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None, description='Video segment where a text snippet was detected.'
    )


class GoogleCloudVideointelligenceV1p3beta1TimestampedObject(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1DetectedAttribute]
    ] = Field(
        None, description='Optional. The attributes of the object in the bounding box.'
    )
    landmarks: Optional[List[GoogleCloudVideointelligenceV1p3beta1DetectedLandmark]] = (
        Field(None, description='Optional. The detected landmarks.')
    )
    normalizedBoundingBox: Optional[
        GoogleCloudVideointelligenceV1p3beta1NormalizedBoundingBox
    ] = Field(
        None,
        description='Normalized Bounding box in a frame, where the object is located.',
    )
    timeOffset: Optional[str] = Field(
        None,
        description='Time-offset, relative to the beginning of the video, corresponding to the video frame for this object.',
    )


class GoogleCloudVideointelligenceV1p3beta1Track(BaseModel):
    attributes: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1DetectedAttribute]
    ] = Field(None, description='Optional. Attributes in the track level.')
    confidence: Optional[float] = Field(
        None, description='Optional. The confidence score of the tracked object.'
    )
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None, description='Video segment of a track.'
    )
    timestampedObjects: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1TimestampedObject]
    ] = Field(
        None,
        description='The object with timestamp and attributes per frame in the track.',
    )


class GoogleCloudVideointelligenceV1p3beta1VideoAnnotationProgress(BaseModel):
    feature: Optional[Feature4] = Field(
        None,
        description='Specifies which feature is being tracked if the request contains more than one feature.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Approximate percentage processed thus far. Guaranteed to be 100 when fully processed.',
    )
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None,
        description='Specifies which segment is being tracked if the request contains more than one segment.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time of the most recent update.'
    )


class GoogleCloudVideointelligenceV1p3beta1VideoContext(BaseModel):
    explicitContentDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1ExplicitContentDetectionConfig
    ] = Field(None, description='Config for EXPLICIT_CONTENT_DETECTION.')
    faceDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1FaceDetectionConfig
    ] = Field(None, description='Config for FACE_DETECTION.')
    labelDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1LabelDetectionConfig
    ] = Field(None, description='Config for LABEL_DETECTION.')
    objectTrackingConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1ObjectTrackingConfig
    ] = Field(None, description='Config for OBJECT_TRACKING.')
    personDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1PersonDetectionConfig
    ] = Field(None, description='Config for PERSON_DETECTION.')
    segments: Optional[List[GoogleCloudVideointelligenceV1p3beta1VideoSegment]] = Field(
        None,
        description='Video segments to annotate. The segments may overlap and are not required to be contiguous or span the whole video. If unspecified, each video is treated as a single segment.',
    )
    shotChangeDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1ShotChangeDetectionConfig
    ] = Field(None, description='Config for SHOT_CHANGE_DETECTION.')
    speechTranscriptionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig
    ] = Field(None, description='Config for SPEECH_TRANSCRIPTION.')
    textDetectionConfig: Optional[
        GoogleCloudVideointelligenceV1p3beta1TextDetectionConfig
    ] = Field(None, description='Config for TEXT_DETECTION.')


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleCloudVideointelligenceV1AnnotateVideoProgress(BaseModel):
    annotationProgress: Optional[
        List[GoogleCloudVideointelligenceV1VideoAnnotationProgress]
    ] = Field(
        None,
        description='Progress metadata for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1FaceAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1FaceFrame]] = Field(
        None, description='All video frames where a face was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1FaceSegment]] = Field(
        None, description='All video segments where a face was detected.'
    )
    thumbnail: Optional[str] = Field(
        None, description='Thumbnail of a representative face view (in JPEG format).'
    )


class GoogleCloudVideointelligenceV1FaceDetectionAnnotation(BaseModel):
    thumbnail: Optional[str] = Field(
        None, description="The thumbnail of a person's face."
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1Track]] = Field(
        None, description='The face tracks with attributes.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1LabelAnnotation(BaseModel):
    categoryEntities: Optional[List[GoogleCloudVideointelligenceV1Entity]] = Field(
        None,
        description='Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.',
    )
    entity: Optional[GoogleCloudVideointelligenceV1Entity] = Field(
        None, description='Detected entity.'
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1LabelFrame]] = Field(
        None, description='All video frames where a label was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1LabelSegment]] = Field(
        None, description='All video segments where a label was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1LogoRecognitionAnnotation(BaseModel):
    entity: Optional[GoogleCloudVideointelligenceV1Entity] = Field(
        None,
        description='Entity category information to specify the logo class that all the logo tracks within this LogoRecognitionAnnotation are recognized as.',
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1VideoSegment]] = Field(
        None,
        description='All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.',
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1Track]] = Field(
        None,
        description='All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.',
    )


class GoogleCloudVideointelligenceV1PersonDetectionAnnotation(BaseModel):
    tracks: Optional[List[GoogleCloudVideointelligenceV1Track]] = Field(
        None, description='The detected tracks of a person.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1TextAnnotation(BaseModel):
    segments: Optional[List[GoogleCloudVideointelligenceV1TextSegment]] = Field(
        None, description='All video segments where OCR detected text appears.'
    )
    text: Optional[str] = Field(None, description='The detected text.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1VideoAnnotationResults(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, indicates an error. Note that for a single `AnnotateVideoRequest` some videos may succeed and some may fail.',
    )
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation.')
    faceAnnotations: Optional[List[GoogleCloudVideointelligenceV1FaceAnnotation]] = (
        Field(
            None,
            description='Deprecated. Please use `face_detection_annotations` instead.',
        )
    )
    faceDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1FaceDetectionAnnotation]
    ] = Field(None, description='Face detection annotations.')
    frameLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LabelAnnotation]
    ] = Field(
        None,
        description='Label annotations on frame level. There is exactly one element for each unique label.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    logoRecognitionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LogoRecognitionAnnotation]
    ] = Field(
        None,
        description='Annotations for list of logos detected, tracked and recognized in video.',
    )
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1ObjectTrackingAnnotation]
    ] = Field(
        None,
        description='Annotations for list of objects detected and tracked in video.',
    )
    personDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1PersonDetectionAnnotation]
    ] = Field(None, description='Person detection annotations.')
    segment: Optional[GoogleCloudVideointelligenceV1VideoSegment] = Field(
        None, description='Video segment on which the annotation is run.'
    )
    segmentLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on video level or user-specified segment level. There is exactly one element for each unique label.',
    )
    segmentPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on video level or user-specified segment level. There is exactly one element for each unique label. Compared to the existing topical `segment_label_annotations`, this field presents more fine-grained, segment-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    shotAnnotations: Optional[List[GoogleCloudVideointelligenceV1VideoSegment]] = Field(
        None,
        description='Shot annotations. Each shot is represented as a video segment.',
    )
    shotLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on shot level. There is exactly one element for each unique label.',
    )
    shotPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on shot level. There is exactly one element for each unique label. Compared to the existing topical `shot_label_annotations`, this field presents more fine-grained, shot-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    speechTranscriptions: Optional[
        List[GoogleCloudVideointelligenceV1SpeechTranscription]
    ] = Field(None, description='Speech transcription.')
    textAnnotations: Optional[List[GoogleCloudVideointelligenceV1TextAnnotation]] = (
        Field(
            None,
            description='OCR text detection and tracking. Annotations for list of detected text snippets. Each will have list of frame information associated with it.',
        )
    )


class GoogleCloudVideointelligenceV1beta2AnnotateVideoProgress(BaseModel):
    annotationProgress: Optional[
        List[GoogleCloudVideointelligenceV1beta2VideoAnnotationProgress]
    ] = Field(
        None,
        description='Progress metadata for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1beta2FaceAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2FaceFrame]] = Field(
        None, description='All video frames where a face was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1beta2FaceSegment]] = Field(
        None, description='All video segments where a face was detected.'
    )
    thumbnail: Optional[str] = Field(
        None, description='Thumbnail of a representative face view (in JPEG format).'
    )


class GoogleCloudVideointelligenceV1beta2FaceDetectionAnnotation(BaseModel):
    thumbnail: Optional[str] = Field(
        None, description="The thumbnail of a person's face."
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1beta2Track]] = Field(
        None, description='The face tracks with attributes.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2LabelAnnotation(BaseModel):
    categoryEntities: Optional[List[GoogleCloudVideointelligenceV1beta2Entity]] = Field(
        None,
        description='Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.',
    )
    entity: Optional[GoogleCloudVideointelligenceV1beta2Entity] = Field(
        None, description='Detected entity.'
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1beta2LabelFrame]] = Field(
        None, description='All video frames where a label was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1beta2LabelSegment]] = Field(
        None, description='All video segments where a label was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2LogoRecognitionAnnotation(BaseModel):
    entity: Optional[GoogleCloudVideointelligenceV1beta2Entity] = Field(
        None,
        description='Entity category information to specify the logo class that all the logo tracks within this LogoRecognitionAnnotation are recognized as.',
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1beta2VideoSegment]] = Field(
        None,
        description='All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.',
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1beta2Track]] = Field(
        None,
        description='All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.',
    )


class GoogleCloudVideointelligenceV1beta2PersonDetectionAnnotation(BaseModel):
    tracks: Optional[List[GoogleCloudVideointelligenceV1beta2Track]] = Field(
        None, description='The detected tracks of a person.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2TextAnnotation(BaseModel):
    segments: Optional[List[GoogleCloudVideointelligenceV1beta2TextSegment]] = Field(
        None, description='All video segments where OCR detected text appears.'
    )
    text: Optional[str] = Field(None, description='The detected text.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1beta2VideoAnnotationResults(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, indicates an error. Note that for a single `AnnotateVideoRequest` some videos may succeed and some may fail.',
    )
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1beta2ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation.')
    faceAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2FaceAnnotation]
    ] = Field(
        None, description='Deprecated. Please use `face_detection_annotations` instead.'
    )
    faceDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2FaceDetectionAnnotation]
    ] = Field(None, description='Face detection annotations.')
    frameLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LabelAnnotation]
    ] = Field(
        None,
        description='Label annotations on frame level. There is exactly one element for each unique label.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    logoRecognitionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LogoRecognitionAnnotation]
    ] = Field(
        None,
        description='Annotations for list of logos detected, tracked and recognized in video.',
    )
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2ObjectTrackingAnnotation]
    ] = Field(
        None,
        description='Annotations for list of objects detected and tracked in video.',
    )
    personDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2PersonDetectionAnnotation]
    ] = Field(None, description='Person detection annotations.')
    segment: Optional[GoogleCloudVideointelligenceV1beta2VideoSegment] = Field(
        None, description='Video segment on which the annotation is run.'
    )
    segmentLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on video level or user-specified segment level. There is exactly one element for each unique label.',
    )
    segmentPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on video level or user-specified segment level. There is exactly one element for each unique label. Compared to the existing topical `segment_label_annotations`, this field presents more fine-grained, segment-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    shotAnnotations: Optional[List[GoogleCloudVideointelligenceV1beta2VideoSegment]] = (
        Field(
            None,
            description='Shot annotations. Each shot is represented as a video segment.',
        )
    )
    shotLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on shot level. There is exactly one element for each unique label.',
    )
    shotPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on shot level. There is exactly one element for each unique label. Compared to the existing topical `shot_label_annotations`, this field presents more fine-grained, shot-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    speechTranscriptions: Optional[
        List[GoogleCloudVideointelligenceV1beta2SpeechTranscription]
    ] = Field(None, description='Speech transcription.')
    textAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1beta2TextAnnotation]
    ] = Field(
        None,
        description='OCR text detection and tracking. Annotations for list of detected text snippets. Each will have list of frame information associated with it.',
    )


class GoogleCloudVideointelligenceV1p1beta1AnnotateVideoProgress(BaseModel):
    annotationProgress: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1VideoAnnotationProgress]
    ] = Field(
        None,
        description='Progress metadata for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p1beta1FaceAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1p1beta1FaceFrame]] = Field(
        None, description='All video frames where a face was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p1beta1FaceSegment]] = Field(
        None, description='All video segments where a face was detected.'
    )
    thumbnail: Optional[str] = Field(
        None, description='Thumbnail of a representative face view (in JPEG format).'
    )


class GoogleCloudVideointelligenceV1p1beta1FaceDetectionAnnotation(BaseModel):
    thumbnail: Optional[str] = Field(
        None, description="The thumbnail of a person's face."
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p1beta1Track]] = Field(
        None, description='The face tracks with attributes.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1LabelAnnotation(BaseModel):
    categoryEntities: Optional[List[GoogleCloudVideointelligenceV1p1beta1Entity]] = (
        Field(
            None,
            description='Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.',
        )
    )
    entity: Optional[GoogleCloudVideointelligenceV1p1beta1Entity] = Field(
        None, description='Detected entity.'
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p1beta1LabelFrame]] = Field(
        None, description='All video frames where a label was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p1beta1LabelSegment]] = Field(
        None, description='All video segments where a label was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation(BaseModel):
    entity: Optional[GoogleCloudVideointelligenceV1p1beta1Entity] = Field(
        None,
        description='Entity category information to specify the logo class that all the logo tracks within this LogoRecognitionAnnotation are recognized as.',
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]] = Field(
        None,
        description='All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.',
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p1beta1Track]] = Field(
        None,
        description='All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.',
    )


class GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation(BaseModel):
    tracks: Optional[List[GoogleCloudVideointelligenceV1p1beta1Track]] = Field(
        None, description='The detected tracks of a person.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1TextAnnotation(BaseModel):
    segments: Optional[List[GoogleCloudVideointelligenceV1p1beta1TextSegment]] = Field(
        None, description='All video segments where OCR detected text appears.'
    )
    text: Optional[str] = Field(None, description='The detected text.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p1beta1VideoAnnotationResults(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, indicates an error. Note that for a single `AnnotateVideoRequest` some videos may succeed and some may fail.',
    )
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1p1beta1ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation.')
    faceAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1FaceAnnotation]
    ] = Field(
        None, description='Deprecated. Please use `face_detection_annotations` instead.'
    )
    faceDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1FaceDetectionAnnotation]
    ] = Field(None, description='Face detection annotations.')
    frameLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LabelAnnotation]
    ] = Field(
        None,
        description='Label annotations on frame level. There is exactly one element for each unique label.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    logoRecognitionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LogoRecognitionAnnotation]
    ] = Field(
        None,
        description='Annotations for list of logos detected, tracked and recognized in video.',
    )
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1ObjectTrackingAnnotation]
    ] = Field(
        None,
        description='Annotations for list of objects detected and tracked in video.',
    )
    personDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1PersonDetectionAnnotation]
    ] = Field(None, description='Person detection annotations.')
    segment: Optional[GoogleCloudVideointelligenceV1p1beta1VideoSegment] = Field(
        None, description='Video segment on which the annotation is run.'
    )
    segmentLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on video level or user-specified segment level. There is exactly one element for each unique label.',
    )
    segmentPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on video level or user-specified segment level. There is exactly one element for each unique label. Compared to the existing topical `segment_label_annotations`, this field presents more fine-grained, segment-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    shotAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1VideoSegment]
    ] = Field(
        None,
        description='Shot annotations. Each shot is represented as a video segment.',
    )
    shotLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on shot level. There is exactly one element for each unique label.',
    )
    shotPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on shot level. There is exactly one element for each unique label. Compared to the existing topical `shot_label_annotations`, this field presents more fine-grained, shot-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    speechTranscriptions: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1SpeechTranscription]
    ] = Field(None, description='Speech transcription.')
    textAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1TextAnnotation]
    ] = Field(
        None,
        description='OCR text detection and tracking. Annotations for list of detected text snippets. Each will have list of frame information associated with it.',
    )


class GoogleCloudVideointelligenceV1p2beta1AnnotateVideoProgress(BaseModel):
    annotationProgress: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1VideoAnnotationProgress]
    ] = Field(
        None,
        description='Progress metadata for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p2beta1FaceAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1p2beta1FaceFrame]] = Field(
        None, description='All video frames where a face was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p2beta1FaceSegment]] = Field(
        None, description='All video segments where a face was detected.'
    )
    thumbnail: Optional[str] = Field(
        None, description='Thumbnail of a representative face view (in JPEG format).'
    )


class GoogleCloudVideointelligenceV1p2beta1FaceDetectionAnnotation(BaseModel):
    thumbnail: Optional[str] = Field(
        None, description="The thumbnail of a person's face."
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p2beta1Track]] = Field(
        None, description='The face tracks with attributes.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1LabelAnnotation(BaseModel):
    categoryEntities: Optional[List[GoogleCloudVideointelligenceV1p2beta1Entity]] = (
        Field(
            None,
            description='Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.',
        )
    )
    entity: Optional[GoogleCloudVideointelligenceV1p2beta1Entity] = Field(
        None, description='Detected entity.'
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p2beta1LabelFrame]] = Field(
        None, description='All video frames where a label was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p2beta1LabelSegment]] = Field(
        None, description='All video segments where a label was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1LogoRecognitionAnnotation(BaseModel):
    entity: Optional[GoogleCloudVideointelligenceV1p2beta1Entity] = Field(
        None,
        description='Entity category information to specify the logo class that all the logo tracks within this LogoRecognitionAnnotation are recognized as.',
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p2beta1VideoSegment]] = Field(
        None,
        description='All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.',
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p2beta1Track]] = Field(
        None,
        description='All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.',
    )


class GoogleCloudVideointelligenceV1p2beta1PersonDetectionAnnotation(BaseModel):
    tracks: Optional[List[GoogleCloudVideointelligenceV1p2beta1Track]] = Field(
        None, description='The detected tracks of a person.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1TextAnnotation(BaseModel):
    segments: Optional[List[GoogleCloudVideointelligenceV1p2beta1TextSegment]] = Field(
        None, description='All video segments where OCR detected text appears.'
    )
    text: Optional[str] = Field(None, description='The detected text.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p2beta1VideoAnnotationResults(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, indicates an error. Note that for a single `AnnotateVideoRequest` some videos may succeed and some may fail.',
    )
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1p2beta1ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation.')
    faceAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1FaceAnnotation]
    ] = Field(
        None, description='Deprecated. Please use `face_detection_annotations` instead.'
    )
    faceDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1FaceDetectionAnnotation]
    ] = Field(None, description='Face detection annotations.')
    frameLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LabelAnnotation]
    ] = Field(
        None,
        description='Label annotations on frame level. There is exactly one element for each unique label.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    logoRecognitionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LogoRecognitionAnnotation]
    ] = Field(
        None,
        description='Annotations for list of logos detected, tracked and recognized in video.',
    )
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1ObjectTrackingAnnotation]
    ] = Field(
        None,
        description='Annotations for list of objects detected and tracked in video.',
    )
    personDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1PersonDetectionAnnotation]
    ] = Field(None, description='Person detection annotations.')
    segment: Optional[GoogleCloudVideointelligenceV1p2beta1VideoSegment] = Field(
        None, description='Video segment on which the annotation is run.'
    )
    segmentLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on video level or user-specified segment level. There is exactly one element for each unique label.',
    )
    segmentPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on video level or user-specified segment level. There is exactly one element for each unique label. Compared to the existing topical `segment_label_annotations`, this field presents more fine-grained, segment-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    shotAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1VideoSegment]
    ] = Field(
        None,
        description='Shot annotations. Each shot is represented as a video segment.',
    )
    shotLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on shot level. There is exactly one element for each unique label.',
    )
    shotPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on shot level. There is exactly one element for each unique label. Compared to the existing topical `shot_label_annotations`, this field presents more fine-grained, shot-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    speechTranscriptions: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1SpeechTranscription]
    ] = Field(None, description='Speech transcription.')
    textAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1TextAnnotation]
    ] = Field(
        None,
        description='OCR text detection and tracking. Annotations for list of detected text snippets. Each will have list of frame information associated with it.',
    )


class GoogleCloudVideointelligenceV1p3beta1AnnotateVideoProgress(BaseModel):
    annotationProgress: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1VideoAnnotationProgress]
    ] = Field(
        None,
        description='Progress metadata for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p3beta1AnnotateVideoRequest(BaseModel):
    features: Optional[List[Feature4]] = Field(
        None, description='Required. Requested video annotation features.'
    )
    inputContent: Optional[str] = Field(
        None,
        description='The video data bytes. If unset, the input video(s) should be specified via the `input_uri`. If set, `input_uri` must be unset.',
    )
    inputUri: Optional[str] = Field(
        None,
        description="Input video location. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. URIs must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints). To identify multiple videos, a video URI may include wildcards in the `object-id`. Supported wildcards: '*' to match 0 or more characters; '?' to match 1 character. If unset, the input video should be embedded in the request as `input_content`. If set, `input_content` must be unset.",
    )
    locationId: Optional[str] = Field(
        None,
        description='Optional. Cloud region where annotation should take place. Supported cloud regions are: `us-east1`, `us-west1`, `europe-west1`, `asia-east1`. If no region is specified, the region will be determined based on video file location.',
    )
    outputUri: Optional[str] = Field(
        None,
        description='Optional. Location where the output (in JSON format) should be stored. Currently, only [Cloud Storage](https://cloud.google.com/storage/) URIs are supported. These must be specified in the following format: `gs://bucket-id/object-id` (other URI formats return google.rpc.Code.INVALID_ARGUMENT). For more information, see [Request URIs](https://cloud.google.com/storage/docs/request-endpoints).',
    )
    videoContext: Optional[GoogleCloudVideointelligenceV1p3beta1VideoContext] = Field(
        None, description='Additional video context and/or feature-specific parameters.'
    )


class GoogleCloudVideointelligenceV1p3beta1CelebrityTrack(BaseModel):
    celebrities: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1RecognizedCelebrity]
    ] = Field(
        None, description='Top N match of the celebrities for the face in this track.'
    )
    faceTrack: Optional[GoogleCloudVideointelligenceV1p3beta1Track] = Field(
        None, description="A track of a person's face."
    )


class GoogleCloudVideointelligenceV1p3beta1FaceAnnotation(BaseModel):
    frames: Optional[List[GoogleCloudVideointelligenceV1p3beta1FaceFrame]] = Field(
        None, description='All video frames where a face was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p3beta1FaceSegment]] = Field(
        None, description='All video segments where a face was detected.'
    )
    thumbnail: Optional[str] = Field(
        None, description='Thumbnail of a representative face view (in JPEG format).'
    )


class GoogleCloudVideointelligenceV1p3beta1FaceDetectionAnnotation(BaseModel):
    thumbnail: Optional[str] = Field(
        None, description="The thumbnail of a person's face."
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p3beta1Track]] = Field(
        None, description='The face tracks with attributes.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1LabelAnnotation(BaseModel):
    categoryEntities: Optional[List[GoogleCloudVideointelligenceV1p3beta1Entity]] = (
        Field(
            None,
            description='Common categories for the detected entity. For example, when the label is `Terrier`, the category is likely `dog`. And in some cases there might be more than one categories e.g., `Terrier` could also be a `pet`.',
        )
    )
    entity: Optional[GoogleCloudVideointelligenceV1p3beta1Entity] = Field(
        None, description='Detected entity.'
    )
    frames: Optional[List[GoogleCloudVideointelligenceV1p3beta1LabelFrame]] = Field(
        None, description='All video frames where a label was detected.'
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p3beta1LabelSegment]] = Field(
        None, description='All video segments where a label was detected.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1LogoRecognitionAnnotation(BaseModel):
    entity: Optional[GoogleCloudVideointelligenceV1p3beta1Entity] = Field(
        None,
        description='Entity category information to specify the logo class that all the logo tracks within this LogoRecognitionAnnotation are recognized as.',
    )
    segments: Optional[List[GoogleCloudVideointelligenceV1p3beta1VideoSegment]] = Field(
        None,
        description='All video segments where the recognized logo appears. There might be multiple instances of the same logo class appearing in one VideoSegment.',
    )
    tracks: Optional[List[GoogleCloudVideointelligenceV1p3beta1Track]] = Field(
        None,
        description='All logo tracks where the recognized logo appears. Each track corresponds to one logo instance appearing in consecutive frames.',
    )


class GoogleCloudVideointelligenceV1p3beta1PersonDetectionAnnotation(BaseModel):
    tracks: Optional[List[GoogleCloudVideointelligenceV1p3beta1Track]] = Field(
        None, description='The detected tracks of a person.'
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults(BaseModel):
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation results.')
    frameTimestamp: Optional[str] = Field(
        None, description='Timestamp of the processed frame in microseconds.'
    )
    labelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(None, description='Label annotation results.')
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation]
    ] = Field(None, description='Object tracking results.')
    shotAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1VideoSegment]
    ] = Field(
        None,
        description='Shot annotation results. Each shot is represented as a video segment.',
    )


class GoogleCloudVideointelligenceV1p3beta1TextAnnotation(BaseModel):
    segments: Optional[List[GoogleCloudVideointelligenceV1p3beta1TextSegment]] = Field(
        None, description='All video segments where OCR detected text appears.'
    )
    text: Optional[str] = Field(None, description='The detected text.')
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1AnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        List[GoogleCloudVideointelligenceV1VideoAnnotationResults]
    ] = Field(
        None,
        description='Annotation results for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1beta2AnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        List[GoogleCloudVideointelligenceV1beta2VideoAnnotationResults]
    ] = Field(
        None,
        description='Annotation results for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p1beta1AnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        List[GoogleCloudVideointelligenceV1p1beta1VideoAnnotationResults]
    ] = Field(
        None,
        description='Annotation results for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p2beta1AnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        List[GoogleCloudVideointelligenceV1p2beta1VideoAnnotationResults]
    ] = Field(
        None,
        description='Annotation results for all videos specified in `AnnotateVideoRequest`.',
    )


class GoogleCloudVideointelligenceV1p3beta1CelebrityRecognitionAnnotation(BaseModel):
    celebrityTracks: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1CelebrityTrack]
    ] = Field(
        None,
        description='The tracks detected from the input video, including recognized celebrities and other detected faces in the video.',
    )
    version: Optional[str] = Field(None, description='Feature version.')


class GoogleCloudVideointelligenceV1p3beta1StreamingAnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        GoogleCloudVideointelligenceV1p3beta1StreamingVideoAnnotationResults
    ] = Field(None, description='Streaming annotation results.')
    annotationResultsUri: Optional[str] = Field(
        None,
        description="Google Cloud Storage URI that stores annotation results of one streaming session in JSON format. It is the annotation_result_storage_directory from the request followed by '/cloud_project_number-session_id'.",
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, returns a google.rpc.Status message that specifies the error for the operation.',
    )


class GoogleCloudVideointelligenceV1p3beta1VideoAnnotationResults(BaseModel):
    celebrityRecognitionAnnotations: Optional[
        GoogleCloudVideointelligenceV1p3beta1CelebrityRecognitionAnnotation
    ] = Field(None, description='Celebrity recognition annotations.')
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='If set, indicates an error. Note that for a single `AnnotateVideoRequest` some videos may succeed and some may fail.',
    )
    explicitAnnotation: Optional[
        GoogleCloudVideointelligenceV1p3beta1ExplicitContentAnnotation
    ] = Field(None, description='Explicit content annotation.')
    faceAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1FaceAnnotation]
    ] = Field(
        None, description='Deprecated. Please use `face_detection_annotations` instead.'
    )
    faceDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1FaceDetectionAnnotation]
    ] = Field(None, description='Face detection annotations.')
    frameLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(
        None,
        description='Label annotations on frame level. There is exactly one element for each unique label.',
    )
    inputUri: Optional[str] = Field(
        None,
        description='Video file location in [Cloud Storage](https://cloud.google.com/storage/).',
    )
    logoRecognitionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LogoRecognitionAnnotation]
    ] = Field(
        None,
        description='Annotations for list of logos detected, tracked and recognized in video.',
    )
    objectAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1ObjectTrackingAnnotation]
    ] = Field(
        None,
        description='Annotations for list of objects detected and tracked in video.',
    )
    personDetectionAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1PersonDetectionAnnotation]
    ] = Field(None, description='Person detection annotations.')
    segment: Optional[GoogleCloudVideointelligenceV1p3beta1VideoSegment] = Field(
        None, description='Video segment on which the annotation is run.'
    )
    segmentLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on video level or user-specified segment level. There is exactly one element for each unique label.',
    )
    segmentPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on video level or user-specified segment level. There is exactly one element for each unique label. Compared to the existing topical `segment_label_annotations`, this field presents more fine-grained, segment-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    shotAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1VideoSegment]
    ] = Field(
        None,
        description='Shot annotations. Each shot is represented as a video segment.',
    )
    shotLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(
        None,
        description='Topical label annotations on shot level. There is exactly one element for each unique label.',
    )
    shotPresenceLabelAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1LabelAnnotation]
    ] = Field(
        None,
        description='Presence label annotations on shot level. There is exactly one element for each unique label. Compared to the existing topical `shot_label_annotations`, this field presents more fine-grained, shot-level labels detected in video content and is made available only when the client sets `LabelDetectionConfig.model` to "builtin/latest" in the request.',
    )
    speechTranscriptions: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1SpeechTranscription]
    ] = Field(None, description='Speech transcription.')
    textAnnotations: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1TextAnnotation]
    ] = Field(
        None,
        description='OCR text detection and tracking. Annotations for list of detected text snippets. Each will have list of frame information associated with it.',
    )


class GoogleCloudVideointelligenceV1p3beta1AnnotateVideoResponse(BaseModel):
    annotationResults: Optional[
        List[GoogleCloudVideointelligenceV1p3beta1VideoAnnotationResults]
    ] = Field(
        None,
        description='Annotation results for all videos specified in `AnnotateVideoRequest`.',
    )
